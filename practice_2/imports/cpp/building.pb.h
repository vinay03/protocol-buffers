// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: building.proto

#ifndef PROTOBUF_INCLUDED_building_2eproto
#define PROTOBUF_INCLUDED_building_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "street.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_building_2eproto 

namespace protobuf_building_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_building_2eproto
class Building;
class BuildingDefaultTypeInternal;
extern BuildingDefaultTypeInternal _Building_default_instance_;
namespace google {
namespace protobuf {
template<> ::Building* Arena::CreateMaybeMessage<::Building>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Building : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Building) */ {
 public:
  Building();
  virtual ~Building();

  Building(const Building& from);

  inline Building& operator=(const Building& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Building(Building&& from) noexcept
    : Building() {
    *this = ::std::move(from);
  }

  inline Building& operator=(Building&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Building& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Building* internal_default_instance() {
    return reinterpret_cast<const Building*>(
               &_Building_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Building* other);
  friend void swap(Building& a, Building& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Building* New() const final {
    return CreateMaybeMessage<Building>(NULL);
  }

  Building* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Building>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Building& from);
  void MergeFrom(const Building& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Building* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string building_name = 1;
  void clear_building_name();
  static const int kBuildingNameFieldNumber = 1;
  const ::std::string& building_name() const;
  void set_building_name(const ::std::string& value);
  #if LANG_CXX11
  void set_building_name(::std::string&& value);
  #endif
  void set_building_name(const char* value);
  void set_building_name(const char* value, size_t size);
  ::std::string* mutable_building_name();
  ::std::string* release_building_name();
  void set_allocated_building_name(::std::string* building_name);

  // .Street street = 3;
  bool has_street() const;
  void clear_street();
  static const int kStreetFieldNumber = 3;
  private:
  const ::Street& _internal_street() const;
  public:
  const ::Street& street() const;
  ::Street* release_street();
  ::Street* mutable_street();
  void set_allocated_street(::Street* street);

  // uint32 building_number = 2;
  void clear_building_number();
  static const int kBuildingNumberFieldNumber = 2;
  ::google::protobuf::uint32 building_number() const;
  void set_building_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Building)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr building_name_;
  ::Street* street_;
  ::google::protobuf::uint32 building_number_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_building_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Building

// string building_name = 1;
inline void Building::clear_building_name() {
  building_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Building::building_name() const {
  // @@protoc_insertion_point(field_get:Building.building_name)
  return building_name_.GetNoArena();
}
inline void Building::set_building_name(const ::std::string& value) {
  
  building_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Building.building_name)
}
#if LANG_CXX11
inline void Building::set_building_name(::std::string&& value) {
  
  building_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Building.building_name)
}
#endif
inline void Building::set_building_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  building_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Building.building_name)
}
inline void Building::set_building_name(const char* value, size_t size) {
  
  building_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Building.building_name)
}
inline ::std::string* Building::mutable_building_name() {
  
  // @@protoc_insertion_point(field_mutable:Building.building_name)
  return building_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Building::release_building_name() {
  // @@protoc_insertion_point(field_release:Building.building_name)
  
  return building_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Building::set_allocated_building_name(::std::string* building_name) {
  if (building_name != NULL) {
    
  } else {
    
  }
  building_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), building_name);
  // @@protoc_insertion_point(field_set_allocated:Building.building_name)
}

// uint32 building_number = 2;
inline void Building::clear_building_number() {
  building_number_ = 0u;
}
inline ::google::protobuf::uint32 Building::building_number() const {
  // @@protoc_insertion_point(field_get:Building.building_number)
  return building_number_;
}
inline void Building::set_building_number(::google::protobuf::uint32 value) {
  
  building_number_ = value;
  // @@protoc_insertion_point(field_set:Building.building_number)
}

// .Street street = 3;
inline bool Building::has_street() const {
  return this != internal_default_instance() && street_ != NULL;
}
inline const ::Street& Building::_internal_street() const {
  return *street_;
}
inline const ::Street& Building::street() const {
  const ::Street* p = street_;
  // @@protoc_insertion_point(field_get:Building.street)
  return p != NULL ? *p : *reinterpret_cast<const ::Street*>(
      &::_Street_default_instance_);
}
inline ::Street* Building::release_street() {
  // @@protoc_insertion_point(field_release:Building.street)
  
  ::Street* temp = street_;
  street_ = NULL;
  return temp;
}
inline ::Street* Building::mutable_street() {
  
  if (street_ == NULL) {
    auto* p = CreateMaybeMessage<::Street>(GetArenaNoVirtual());
    street_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Building.street)
  return street_;
}
inline void Building::set_allocated_street(::Street* street) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(street_);
  }
  if (street) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      street = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, street, submessage_arena);
    }
    
  } else {
    
  }
  street_ = street;
  // @@protoc_insertion_point(field_set_allocated:Building.street)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_building_2eproto
